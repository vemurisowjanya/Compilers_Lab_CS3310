//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import javax.crypto.CipherInputStream;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Generate<R,A> implements GJVisitor<R,A> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//

	private int count_temp = 50;
	private int count_label = 0;
	private Integer memSize = 4;
	private String currClass;

	private boolean localFlag = false, ifElseFlag = false, varFlag = false, isClassVar = false;
	private LinkedHashMap<String,String> localVariables ;
	private Stack<String> ifElseStack = new Stack<String>();
	private Stack<String> endOrStartLabelStack = new Stack<String>();
	private Stack<String> nestedArrayAccess = new Stack<String>();
	private String returnType;

	private LinkedHashMap<String,String> typeStorage = Storage.typeStorage;
	private Stack<String> scope = new Stack<String>();
	private LinkedHashMap<String, String> parentTable = Storage.parentTable;

	private LinkedHashMap<String,Structure> classProcedures = Intermediate.classProcedures;
	private LinkedHashMap<String,Structure> classVars = Intermediate.classVars;

	public String fullScope(){
		String sum = "";
		String a = "";
		for(int i=0; i< scope.size(); i++)
		{
			a = scope.elementAt(i); 
			sum = sum + a + ":"; 
		}
		return sum; 	
	}

	public R visit(NodeList n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n, A argu) {
		if ( n.present() ) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this,argu);
				_count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public R visit(NodeOptional n, A argu) {
		if ( n.present() )
			return n.node.accept(this,argu);
		else
			return null;
	}

	public R visit(NodeSequence n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n, A argu) { return null; }

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass()
	 * f1 -> ( TypeDeclaration() )*
	 * f2 -> <EOF>
	 */
	public R visit(Goal n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "{"
	 * f3 -> "public"
	 * f4 -> "static"
	 * f5 -> "void"
	 * f6 -> "main"
	 * f7 -> "("
	 * f8 -> "String"
	 * f9 -> "["
	 * f10 -> "]"
	 * f11 -> Identifier()
	 * f12 -> ")"
	 * f13 -> "{"
	 * f14 -> PrintStatement()
	 * f15 -> "}"
	 * f16 -> "}"
	 */
	public R visit(MainClass n, A argu) {
		R _ret=null;
		currClass = n.f1.f0.tokenImage;
		scope.push(currClass);
		System.out.println("MAIN");
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		n.f7.accept(this, argu);
		n.f8.accept(this, argu);
		n.f9.accept(this, argu);
		n.f10.accept(this, argu);
		n.f11.accept(this, argu);
		n.f12.accept(this, argu);
		n.f13.accept(this, argu);
		n.f14.accept(this, argu);
		n.f15.accept(this, argu);
		n.f16.accept(this, argu);
		System.out.println("END");
		scope.pop();
		return _ret;
	}

	/**
	 * f0 -> ClassDeclaration()
	 *       | ClassExtendsDeclaration()
	 */
	public R visit(TypeDeclaration n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "{"
	 * f3 -> ( VarDeclaration() )*
	 * f4 -> ( MethodDeclaration() )*
	 * f5 -> "}"
	 */
	public R visit(ClassDeclaration n, A argu) {
		R _ret=null;
		currClass = n.f1.f0.tokenImage;
		scope.push(currClass);
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
		scope.pop();
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "extends"
	 * f3 -> Identifier()
	 * f4 -> "{"
	 * f5 -> ( VarDeclaration() )*
	 * f6 -> ( MethodDeclaration() )*
	 * f7 -> "}"
	 */
	public R visit(ClassExtendsDeclaration n, A argu) {
		R _ret=null;
		currClass = n.f1.f0.tokenImage;
		scope.push(currClass);
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		n.f7.accept(this, argu);
		scope.pop();
		return _ret;
	}

	/**
	 * f0 -> Type()
	 * f1 -> Identifier()
	 * f2 -> ";"
	 */
	public R visit(VarDeclaration n, A argu) {
		R _ret=null;
		if(localFlag){
			localVariables.put(n.f1.f0.tokenImage,"TEMP "+count_temp);
			count_temp++;
		}
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "public"
	 * f1 -> Type()
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( FormalParameterList() )?
	 * f5 -> ")"
	 * f6 -> "{"
	 * f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )*
	 * f9 -> "return"
	 * f10 -> Expression()
	 * f11 -> ";"
	 * f12 -> "}"
	 */
	public R visit(MethodDeclaration n, A argu) {
		R _ret=null;
		String id = n.f2.f0.tokenImage;
		String className = scope.peek();
		scope.push(id);
		ArrayList<String>formalParams = classProcedures.get(className).formalParamList.get(className+"?"+id);
		int len=1;
		if(formalParams!=null)
			len += formalParams.size();
		System.out.println(className+"_"+id+" [ "+len+" ] ");
		System.out.println("BEGIN");
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		localFlag = true;
		localVariables = new LinkedHashMap<String,String>();
		n.f7.accept(this, argu);
		n.f8.accept(this, argu);
		n.f9.accept(this, argu);
		String str = n.f10.accept(this, argu).toString();
		System.out.println("RETURN");
		System.out.println(str);
		n.f11.accept(this, argu);
		n.f12.accept(this, argu);
		System.out.println("END");
		scope.pop();
		localFlag = false;
		return _ret;
	}

	/**
	 * f0 -> FormalParameter()
	 * f1 -> ( FormalParameterRest() )*
	 */
	public R visit(FormalParameterList n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Type()
	 * f1 -> Identifier()
	 */
	public R visit(FormalParameter n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> FormalParameter()
	 */
	public R visit(FormalParameterRest n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ArrayType()
	 *       | BooleanType()
	 *       | IntegerType()
	 *       | Identifier()
	 */
	public R visit(Type n, A argu) {
		R _ret=null;

		if(n.f0.which==3)
			_ret = (R)n.f0.toString();
		else{
			String str = n.f0.accept(this, argu).toString();
			_ret = (R)str;}
		return _ret;
	}

	/**
	 * f0 -> "int"
	 * f1 -> "["
	 * f2 -> "]"
	 */
	public R visit(ArrayType n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		_ret = (R)"int[]";
		return _ret;
	}

	/**
	 * f0 -> "boolean"
	 */
	public R visit(BooleanType n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		_ret = (R)"boolean";
		return _ret;
	}

	/**
	 * f0 -> "int"
	 */
	public R visit(IntegerType n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		_ret = (R)"int";
		return _ret;
	}

	/**
	 * f0 -> Block()
	 *       | AssignmentStatement()
	 *       | ArrayAssignmentStatement()
	 *       | IfStatement()
	 *       | WhileStatement()
	 *       | PrintStatement()
	 */
	public R visit(Statement n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "{"
	 * f1 -> ( Statement() )*
	 * f2 -> "}"
	 */
	public R visit(Block n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "="
	 * f2 -> Expression()
	 * f3 -> ";"
	 */
	public R visit(AssignmentStatement n, A argu) {
		R _ret=null;
		varFlag = true;
		isClassVar = true;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		if(isClassVar){
			System.out.println("MOVE TEMP "+count_temp+" PLUS TEMP 0 "+str1);
			int prev_count = count_temp;
			count_temp++;
			str1 = "HSTORE TEMP "+prev_count+" 0";
			varFlag = false;
			isClassVar = false;
		}
		else
			str1 = "MOVE "+str1;

		String str2 = n.f2.accept(this, argu).toString();
		System.out.println(str1+" "+str2);
		n.f3.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "["
	 * f2 -> Expression()
	 * f3 -> "]"
	 * f4 -> "="
	 * f5 -> Expression()
	 * f6 -> ";"
	 */
	public R visit(ArrayAssignmentStatement n, A argu) {
		R _ret=null;
		varFlag = true;
		isClassVar = true;
		String str1 = n.f0.accept(this, argu).toString();
		if(isClassVar){		
			nestedArrayAccess.push(str1);
			isClassVar = false;
			varFlag = false;
		}
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		String str3 = n.f5.accept(this, argu).toString();
		n.f6.accept(this, argu);
		System.out.println("MOVE TEMP "+count_temp+" TIMES PLUS "+str2+" 1 "+memSize);
		int count1 = count_temp;
		count_temp++;
		if(!nestedArrayAccess.empty()){
			System.out.println("MOVE TEMP "+count_temp+" PLUS TEMP 0 "+nestedArrayAccess.pop());
			int prev_count = count_temp;
			count_temp++;
			System.out.println("HLOAD TEMP "+count_temp+" TEMP "+ prev_count+" 0");
			int count2 = count_temp;
			count_temp++;
			System.out.println("MOVE TEMP "+count_temp+" PLUS TEMP "+count1+" TEMP "+count2);
			int count3 = count_temp;
			count_temp++;
			System.out.println("HSTORE TEMP "+count3+" 0 "+str3);
		}
		else{
			System.out.println("MOVE TEMP "+count_temp+" PLUS "+str1+" TEMP "+count1);
			count1 = count_temp;
			count_temp++;
			System.out.println("HSTORE TEMP "+count1+" 0 "+str3);
		}	
		return _ret;
	}

	/**
	 * f0 -> IfthenElseStatement()
	 *       | IfthenStatement()
	 */
	public R visit(IfStatement n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "if"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 */
	public R visit(IfthenStatement n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		String str = n.f2.accept(this, argu).toString();
		System.out.println("CJUMP "+str+" L"+count_label);
		ifElseStack.push("L"+count_label);
		count_label++;
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		System.out.println(ifElseStack.pop()+" NOOP");
		return _ret;
	}

	/**
	 * f0 -> "if"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 * f5 -> "else"
	 * f6 -> Statement()
	 */
	public R visit(IfthenElseStatement n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		String str = n.f2.accept(this, argu).toString();
		System.out.println("CJUMP "+str+" L"+count_label);
		ifElseStack.push("L"+count_label);
		count_label++;
		endOrStartLabelStack.push("L"+count_label);
		count_label++;
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		System.out.println("JUMP "+endOrStartLabelStack.peek());
		System.out.println(ifElseStack.pop());
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		System.out.println(endOrStartLabelStack.pop()+ " NOOP");
		return _ret;
	}

	/**
	 * f0 -> "while"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 */
	public R visit(WhileStatement n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		System.out.println("L"+count_label);
		endOrStartLabelStack.push("L"+count_label);
		count_label++;
		String str = n.f2.accept(this, argu).toString();
		System.out.println("CJUMP "+str+" L"+count_label);
		ifElseStack.push("L"+count_label);
		count_label++;
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		System.out.println("JUMP "+endOrStartLabelStack.peek());
		System.out.println(ifElseStack.pop()+" NOOP");
		endOrStartLabelStack.pop();
		return _ret;
	}

	/**
	 * f0 -> "System.out.println"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> ";"
	 */
	public R visit(PrintStatement n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		String str = n.f2.accept(this, argu).toString();
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		System.out.println("PRINT "+str);
		return _ret;
	}

	/**
	 * f0 -> OrExpression()
	 *       | AndExpression()
	 *       | CompareExpression()
	 *       | neqExpression()
	 *       | PlusExpression()
	 *       | MinusExpression()
	 *       | TimesExpression()
	 *       | DivExpression()
	 *       | ArrayLookup()
	 *       | ArrayLength()
	 *       | MessageSend()
	 *       | PrimaryExpression()
	 */
	public R visit(Expression n, A argu) {
		R _ret=null;
		String str1;
		String str = n.f0.accept(this, argu).toString();

		str1 = "MOVE TEMP "+count_temp+" "+ str;
		System.out.println(str1);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "&&"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(AndExpression n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("CJUMP "+str1+" L"+count_label);
		System.out.println("CJUMP "+str2+" L"+count_label);
		int prev_count = count_label;
		count_label++;
		System.out.println("MOVE "+"TEMP "+count_temp+" 1");
		System.out.println("JUMP L"+count_label);
		System.out.println("L"+prev_count);
		System.out.println("MOVE "+"TEMP "+count_temp+" 0");
		System.out.println("L"+count_label+" NOOP");
		count_label++;
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "||"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(OrExpression n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		int label1 = count_label;
		int label2 = count_label+1;
		int label3 = count_label+2;
		count_label+=3;
		System.out.println("CJUMP "+str1+" L"+label1);
		System.out.println("MOVE "+"TEMP "+count_temp+" 1");
		System.out.println("JUMP L"+label3);
		System.out.println("L"+label1);
		System.out.println("CJUMP "+str2+" L"+label2);
		System.out.println("MOVE "+"TEMP "+count_temp+" 1");
		System.out.println("JUMP L"+label3);
		System.out.println("L"+label2);
		System.out.println("MOVE "+"TEMP "+count_temp+" 0");
		System.out.println("L"+label3+" NOOP");
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "<="
	 * f2 -> PrimaryExpression()
	 */
	public R visit(CompareExpression n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" LE "+str1+" "+str2);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "!="
	 * f2 -> PrimaryExpression()
	 */
	public R visit(neqExpression n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" NE "+str1+" "+str2);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "+"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(PlusExpression n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" PLUS "+str1+" "+str2);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "-"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(MinusExpression n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" MINUS "+str1+" "+str2);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "*"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(TimesExpression n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" TIMES "+str1+" "+str2);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "/"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(DivExpression n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" DIV "+str1+" "+str2);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "["
	 * f2 -> PrimaryExpression()
	 * f3 -> "]"
	 */
	public R visit(ArrayLookup n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		n.f3.accept(this, argu);
		System.out.println("MOVE "+"TEMP "+count_temp+" TIMES PLUS "+str2+" 1 "+memSize);
		int prev_temp = count_temp;
		count_temp++;
		System.out.println("MOVE "+"TEMP "+count_temp+" PLUS "+str1+" "+"TEMP "+prev_temp);
		prev_temp = count_temp;
		count_temp++;
		System.out.println("HLOAD TEMP "+count_temp+" TEMP "+prev_temp+" 0");
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "."
	 * f2 -> "length"
	 */
	public R visit(ArrayLength n, A argu) {
		R _ret=null;
		String str = n.f0.accept(this, argu).toString();
		String len;
		System.out.println("HLOAD TEMP "+count_temp+" "+str+" 0");
		Integer prev_temp = count_temp;
		count_temp++;
		len = "TEMP "+prev_temp;
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		_ret = (R)len;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "."
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( ExpressionList() )?
	 * f5 -> ")"
	 */
	public R visit(MessageSend n, A argu) {
		R _ret=null;
		String className;
		int index=0;
		System.out.println("MOVE TEMP "+count_temp);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		System.out.println("CALL");
		System.out.println("BEGIN");
		String str = n.f0.accept(this, argu).toString();

		className = returnType;

		String methodName = n.f2.f0.tokenImage;
		String str1 = className+"?"+methodName;

		LinkedHashMap<String, Integer> methods = classProcedures.get(className).tempMapping;
		for(String key:methods.keySet()){
			int j = key.indexOf('?');
			String strMethod = key.substring(j+1);
			String strClass = key.substring(0, j);
			if(strMethod.equals(methodName)){
				className = strClass;
				break;
			}
			else
				index++;
		}

		index = (index)*4;
		System.out.println("MOVE TEMP "+count_temp+" "+str);
		Integer thisTmp = count_temp;
		Integer prev_count = count_temp;
		count_temp++;
		System.out.println("HLOAD TEMP "+count_temp+" TEMP "+prev_count+" 0");
		prev_count = count_temp;
		count_temp++;
		System.out.println("MOVE TEMP "+count_temp+" PLUS TEMP "+prev_count+" "+index);
		prev_count = count_temp;
		count_temp++;
		System.out.println("HLOAD TEMP "+count_temp+" TEMP "+prev_count+" 0");
		System.out.println("RETURN");
		System.out.println("TEMP "+count_temp);
		count_temp++;
		System.out.println("END");
		System.out.print("( TEMP "+thisTmp+" ");
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		System.out.println(")");
		n.f5.accept(this, argu);
		returnType = (typeStorage.get(className+":"+methodName+":"));
		return _ret;
	}

	/**
	 * f0 -> Expression()
	 * f1 -> ( ExpressionRest() )*
	 */
	public R visit(ExpressionList n, A argu) {
		R _ret=null;
		System.out.println("BEGIN");
		String str = n.f0.accept(this, argu).toString();
		System.out.println("RETURN");
		System.out.println(str);
		System.out.println("END");
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> Expression()
	 */
	public R visit(ExpressionRest n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		System.out.println("BEGIN");
		String str = n.f1.accept(this, argu).toString();
		System.out.println("RETURN");
		System.out.println(str);
		System.out.println("END");
		return _ret;
	}

	/**
	 * f0 -> IntegerLiteral()
	 *       | TrueLiteral()
	 *       | FalseLiteral()
	 *       | Identifier()
	 *       | ThisExpression()
	 *       | ArrayAllocationExpression()
	 *       | AllocationExpression()
	 *       | NotExpression()
	 *       | BracketExpression()
	 */
	public R visit(PrimaryExpression n, A argu) {
		R _ret=null;
		if(n.f0.which==3){
			varFlag = true;
			isClassVar = true;
		}
		String str = n.f0.accept(this, argu).toString();
		if(isClassVar && varFlag){
			System.out.println("MOVE TEMP "+count_temp+" PLUS TEMP 0 "+str);
			int prev_count = count_temp;
			count_temp++;
			System.out.println("HLOAD TEMP "+count_temp+" TEMP "+prev_count+" 0");
			_ret = (R)("TEMP "+count_temp);
			count_temp++;
			varFlag = false;
			isClassVar = false;
		}
		else
			_ret = (R)str;
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n, A argu) {
		R _ret=null;
		_ret = (R)n.f0.toString();
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "true"
	 */
	public R visit(TrueLiteral n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		_ret = (R)"1";
		return _ret;
	}

	/**
	 * f0 -> "false"
	 */
	public R visit(FalseLiteral n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		_ret = (R)"0";
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Identifier n, A argu) {
		R _ret=null;
		String id = n.f0.tokenImage;
		if(varFlag==true){
			if(localVariables!=null && localVariables.containsKey(id))
			{
				_ret = (R)localVariables.get(id);
			}
			else{
				if(!parentTable.containsKey(scope.peek())){
					String method = scope.pop();
					String className = scope.peek();
					scope.push(method);
					boolean flagFound=false;
					ArrayList<String> paramList = classProcedures.get(className).formalParamList.get(className+"?"+method);
					if(paramList!=null){
						for(int i=0;i<paramList.size();i++){
							if(paramList.get(i).equals(id)){
								i+=1;
								_ret = (R)("TEMP "+i);
								flagFound = true;
								break;
							}
						}
					}
					if(!flagFound)
					{
						Integer index = findIndex(id);
						if(index!=-1){
							Integer offset = (index+1)*memSize;
							if(isClassVar){
								_ret = (R)(offset.toString());
								return _ret;
							}
						}
						else{
							System.out.println("See if there's something wrong"+id);
						}
					}
				}
			}
			String type = typeStorage.get(fullScope()+id);
			if(!(type.equals("int")||type.equals("int[]")||type.equals("boolean")))
				returnType = type;
		}
		n.f0.accept(this, argu);
		varFlag = false;
		isClassVar = false;
		return _ret;
	}

	public Integer findIndex(String id){
		Integer result = -1;
		Set<String> allFields = classVars.get(currClass).tempMapping.keySet();
		Object[] tempList = allFields.toArray();
		for(int i=tempList.length-1;i>=0;i--){
			Integer index = tempList[i].toString().indexOf('?');
			String 	substr = tempList[i].toString().substring(index+1);
			if(id.equals(substr)){
				result = classVars.get(currClass).tempMapping.get(tempList[i]);
				break;
			}
		}
		return result;
	}


	/**
	 * f0 -> "this"
	 */
	public R visit(ThisExpression n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		_ret = (R)" TEMP 0 ";
		returnType = (currClass);
		return _ret;
	}

	/**
	 * f0 -> "new"
	 * f1 -> "int"
	 * f2 -> "["
	 * f3 -> Expression()
	 * f4 -> "]"
	 */
	public R visit(ArrayAllocationExpression n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		String str = n.f3.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		System.out.println("BEGIN");
		System.out.println("MOVE TEMP "+count_temp+" HALLOCATE TIMES PLUS "+str+" 1 4 ");
		String ret_tmp = "TEMP "+count_temp;
		count_temp++;
		System.out.println("MOVE TEMP "+count_temp+" 4");
		String start = "L"+count_label;
		count_label++;
		String end = "L"+count_label;
		count_label++;
		System.out.println(start);
		System.out.println("CJUMP LE TEMP "+count_temp+" MINUS TIMES PLUS "+str+" 1 4 1 "+end);
		System.out.println("HSTORE PLUS "+ret_tmp+" TEMP "+count_temp+" 0 0");
		System.out.println("MOVE TEMP "+count_temp+" PLUS TEMP "+count_temp+" 4");
		System.out.println("JUMP "+start);
		System.out.println(end);
		System.out.println("HSTORE "+ret_tmp+" 0 "+str);
		System.out.println("RETURN");
		System.out.println(ret_tmp);
		System.out.println("END");
		count_temp++;
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "new"
	 * f1 -> Identifier()
	 * f2 -> "("
	 * f3 -> ")"
	 */
	public R visit(AllocationExpression n, A argu) {
		R _ret=null;
		String className = n.f1.f0.tokenImage;
		LinkedHashMap<String,Integer> fields = classVars.get(className).tempMapping;
		LinkedHashMap<String,Integer> methods = classProcedures.get(className).tempMapping;
		Integer memLocField = fields.size();
		Integer vtableSize = methods.size();
		memLocField = (memLocField+1)*4;
		vtableSize = vtableSize*4;

		System.out.println("MOVE TEMP "+count_temp);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		System.out.println("BEGIN");
		System.out.println("MOVE TEMP "+count_temp+" HALLOCATE "+vtableSize.toString());
		Integer vtable_base = count_temp;
		count_temp++;
		System.out.println("MOVE TEMP "+count_temp+" HALLOCATE "+memLocField.toString());
		Integer ret_temp = count_temp;
		count_temp++;
		Integer tmpMem = 0;
		for (String key:methods.keySet()) {
			String str = key.replace('?', '_');
			System.out.println("HSTORE TEMP "+vtable_base+" "+tmpMem.toString()+" "+str);
			tmpMem+=4;
		}
		tmpMem = 4;
		for (String key:fields.keySet()) {
			String str = key.replace('?', '_');
			System.out.println("HSTORE TEMP "+ ret_temp +" "+tmpMem.toString()+" 0");
			tmpMem+=4;
		}
		System.out.println("HSTORE TEMP "+ret_temp+" 0 TEMP "+vtable_base);
		System.out.println("RETURN");
		System.out.println("TEMP "+ret_temp);
		System.out.println("END");
		count_temp++;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		returnType = (n.f1.f0.tokenImage);
		return _ret;
	}

	/**
	 * f0 -> "!"
	 * f1 -> Expression()
	 */
	public R visit(NotExpression n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str = n.f1.accept(this, argu).toString();
		System.out.println("CJUMP "+str+" L"+count_label);
		Integer prevLabel = count_label;
		count_label++;
		Integer anotherL = count_label;
		System.out.println("MOVE TEMP "+count_temp+" 0");
		System.out.println("JUMP L" + count_label);
		count_label++;
		Integer retTemp = count_temp;
		count_temp++;
		System.out.println("L"+prevLabel);
		System.out.println("MOVE TEMP "+retTemp+" 1");
		System.out.println("L"+anotherL + " NOOP");
		_ret = (R)("TEMP "+retTemp);
		return _ret;
	}

	/**
	 * f0 -> "("
	 * f1 -> Expression()
	 * f2 -> ")"
	 */
	public R visit(BracketExpression n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		_ret = (R)n.f1.accept(this, argu).toString();
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> ( IdentifierRest() )*
	 */
	public R visit(IdentifierList n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> Identifier()
	 */
	public R visit(IdentifierRest n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

}