//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeCheck<R> implements GJNoArguVisitor<R> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	
	private HashMap<String, String> symbolTableVar = TypeStorage.symbolTableVar;
	private HashMap<String,LinkedList<String>> symbolTableMethod = TypeStorage.symbolTableMethod ;
	private Stack<String> scope = new Stack<String>();
	private HashMap<String, String> parentTable = TypeStorage.parentTable;
	
	private LinkedList<String> tmpList;
		
	public String fullScope(){
		String sum = "";
        String a = "";
        for(int i=0; i< scope.size(); i++)
        {
        	a = scope.elementAt(i); 
        	sum = sum + a + ":"; 
        }
        return sum; 	
	}
	
	public R visit(NodeList n) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n) {
		if ( n.present() ) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this);
				_count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public R visit(NodeOptional n) {
		if ( n.present() )
			return n.node.accept(this);
		else
			return null;
	}

	public R visit(NodeSequence n) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n) { return null; }

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass()
	 * f1 -> ( TypeDeclaration() )*
	 * f2 -> <EOF>
	 */
	public R visit(Goal n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "{"
	 * f3 -> "public"
	 * f4 -> "static"
	 * f5 -> "void"
	 * f6 -> "main"
	 * f7 -> "("
	 * f8 -> "String"
	 * f9 -> "["
	 * f10 -> "]"
	 * f11 -> Identifier()
	 * f12 -> ")"
	 * f13 -> "{"
	 * f14 -> PrintStatement()
	 * f15 -> "}"
	 * f16 -> "}"
	 */
	public R visit(MainClass n) {
		R _ret=null;
		n.f0.accept(this);
		scope.push(n.f1.accept(this).toString());
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);
		n.f13.accept(this);
		scope.push("main");
		n.f14.accept(this);
		n.f15.accept(this);
		scope.pop();
		n.f16.accept(this);
		scope.pop();
		return _ret;
	}

	/**
	 * f0 -> ClassDeclaration()
	 *       | ClassExtendsDeclaration()
	 */
	public R visit(TypeDeclaration n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "{"
	 * f3 -> ( VarDeclaration() )*
	 * f4 -> ( MethodDeclaration() )*
	 * f5 -> "}"
	 */
	public R visit(ClassDeclaration n) {
		R _ret=null;
		n.f0.accept(this);
		scope.push(n.f1.accept(this).toString());
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		scope.pop();
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "extends"
	 * f3 -> Identifier()
	 * f4 -> "{"
	 * f5 -> ( VarDeclaration() )*
	 * f6 -> ( MethodDeclaration() )*
	 * f7 -> "}"
	 */
	public R visit(ClassExtendsDeclaration n) {
		R _ret=null;
		n.f0.accept(this);
		String child = n.f1.accept(this).toString();
		n.f2.accept(this);
		String parent = n.f3.accept(this).toString();
		n.f4.accept(this);
		parentTable.put(child, parent);
		scope.push(child);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		scope.pop();
		return _ret;
	}

	/**
	 * f0 -> Type()
	 * f1 -> Identifier()
	 * f2 -> ";"
	 */
	public R visit(VarDeclaration n) {
		R _ret=null;

		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "public"
	 * f1 -> Type()
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( FormalParameterList() )?
	 * f5 -> ")"
	 * f6 -> "{"
	 * f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )*
	 * f9 -> "return"
	 * f10 -> Expression()
	 * f11 -> ";"
	 * f12 -> "}"
	 */
	public R visit(MethodDeclaration n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		scope.push(n.f2.accept(this).toString());
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);
		scope.pop();
		return _ret;
	}

	/**
	 * f0 -> FormalParameter()
	 * f1 -> ( FormalParameterRest() )*
	 */
	public R visit(FormalParameterList n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Type()
	 * f1 -> Identifier()
	 */
	public R visit(FormalParameter n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> FormalParameter()
	 */
	public R visit(FormalParameterRest n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ArrayType()
	 *       | BooleanType()
	 *       | IntegerType()
	 *       | Identifier()
	 */
	public R visit(Type n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "int"
	 * f1 -> "["
	 * f2 -> "]"
	 */
	public R visit(ArrayType n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "boolean"
	 */
	public R visit(BooleanType n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "int"
	 */
	public R visit(IntegerType n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Block()
	 *       | AssignmentStatement()
	 *       | ArrayAssignmentStatement()
	 *       | IfStatement()
	 *       | WhileStatement()
	 *       | PrintStatement()
	 */
	public R visit(Statement n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "{"
	 * f1 -> ( Statement() )*
	 * f2 -> "}"
	 */
	public R visit(Block n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "="
	 * f2 -> Expression()
	 * f3 -> ";"
	 */
	public R visit(AssignmentStatement n) {
		R _ret=null;
		String id = n.f0.accept(this).toString();
		//System.out.println("hellllllooooooo"+fullScope()+id);
		String leftType = findIdType(id);
		n.f1.accept(this);
		String rightType = n.f2.accept(this).toString();
		//System.out.println("sai"+rightType);
		//rightType = findIdType(rightType)==null?rightType:findIdType(rightType);
		//System.out.println("sai"+rightType);
		if(leftType==null || !paramTypeCheck(leftType, rightType))
		{
			System.out.println("Type error");
			System.out.println("1");
			System.out.println(leftType+" "+rightType);
			System.exit(0);
		}
		n.f3.accept(this);
		return _ret;
	}
	
	String findIdType(String Id){
		if(Id.equals("int")||Id.equals("boolean") || Id.equals("int[]") || parentTable.containsKey(Id))
			return Id;
		String currScope = fullScope();
		String type = symbolTableVar.get(currScope+Id);
		if(type==null)
		{
			String tmp;
			tmp = scope.peek();
			String parent;
			if(parentTable.containsKey(tmp))			//class is in the top of stack
				parent = tmp;
			else
			{
				String temp1 = scope.pop();
				parent = scope.peek();
				scope.push(temp1);
			}
			type = symbolTableVar.get(parent+":"+Id);
			while(parent!=null && type == null){
				parent = parentTable.get(parent);
				type = symbolTableVar.get(parent+":"+Id);
			}
		}
		/*for (String x:parentTable.keySet()) {
			System.out.println("helloheeeeeeeereeeeeeee"+x+" "+parentTable.get(x));
		}/*
		if(!(parentTable.containsKey(type)|| Id.equals("int")||Id.equals("boolean") || Id.equals("int[]") 
			|| parentTable.containsKey(Id)) )
		{
			System.out.println(type+"hiiii");
			System.out.println(Id);
			System.out.println("Type error");
			System.exit(0);
		}*/
		if(type==null){
			System.out.println(type+"hiiii");
			System.out.println(Id);
			System.out.println("Type error");
			System.exit(0);
		}
		return type; 
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "["
	 * f2 -> Expression()
	 * f3 -> "]"
	 * f4 -> "="
	 * f5 -> Expression()
	 * f6 -> ";"
	 */
	public R visit(ArrayAssignmentStatement n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1); 
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		//type2 = (symbolTableVar.containsKey(fullScope()+type2))?symbolTableVar.get(fullScope()+type2):type2;
		//type2 = findIdType(type2)==null?type2:findIdType(type2);
		n.f3.accept(this);
		n.f4.accept(this);
		String type3 = n.f5.accept(this).toString();
		//type3 = (symbolTableVar.containsKey(fullScope()+type3))?symbolTableVar.get(fullScope()+type3):type3;
		//type3 = findIdType(type3)==null?type3:findIdType(type3);
		n.f6.accept(this);
		if(type2==null || !type2.equals("int")|| type1==null ||	!type1.equals("int[]")
			|| !(type3.equals("int")))
		{
			//substring("int[]",0,len-2) == "int"
			System.out.println("Type error");
			System.exit(0);
			System.out.println("2");
		}
		return _ret;
	}

	/**
	 * f0 -> IfthenElseStatement()
	 *       | IfthenStatement()
	 */
	public R visit(IfStatement n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "if"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 */
	public R visit(IfthenStatement n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		//type2 = (symbolTableVar.containsKey(fullScope()+type2))?symbolTableVar.get(fullScope()+type2):type2;
		//type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(type2==null || !type2.equals("boolean"))
		{
			System.out.println("Type error");
			System.out.println("3");
			System.exit(0);	
		}
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "if"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 * f5 -> "else"
	 * f6 -> Statement()
	 */
	public R visit(IfthenElseStatement n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		//type2 = (symbolTableVar.containsKey(fullScope()+type2))?symbolTableVar.get(fullScope()+type2):type2;
		//type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(type2==null || !type2.equals("boolean"))
		{
			System.out.println("Type error");
			System.out.println("4");
			System.exit(0);	
		}
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "while"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 */
	public R visit(WhileStatement n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		//type2 = (symbolTableVar.containsKey(fullScope()+type2))?symbolTableVar.get(fullScope()+type2):type2;
		//type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(type2==null || !type2.equals("boolean"))
		{
			System.out.println("Type error");
			System.out.println("5");
			System.exit(0);	
		}
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "System.out.println"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> ";"
	 */
	public R visit(PrintStatement n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		//type2 = (symbolTableVar.containsKey(fullScope()+type2))?symbolTableVar.get(fullScope()+type2):type2;
		//type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("int"))
		{
			System.out.println("Type error");
			System.out.println("6");
			System.exit(0);	
		}
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> OrExpression()
	 *       | AndExpression()
	 *       | CompareExpression()
	 *       | neqExpression()
	 *       | PlusExpression()
	 *       | MinusExpression()
	 *       | TimesExpression()
	 *       | DivExpression()
	 *       | ArrayLookup()
	 *       | ArrayLength()
	 *       | MessageSend()
	 *       | PrimaryExpression()
	 */
	public R visit(Expression n) {
		R _ret=null;
		_ret = (R)n.f0.accept(this).toString();
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "&&"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(AndExpression n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("boolean") || !type1.equals("boolean"))
		{
			System.out.println("Type error");
			System.out.println("7");
			System.exit(0);
		}
		_ret = (R)"boolean";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "||"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(OrExpression n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("boolean") || !type1.equals("boolean"))
		{
			System.out.println("Type error");
			System.out.println("8");
			System.exit(0);
		}
		_ret = (R)"boolean";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "<="
	 * f2 -> PrimaryExpression()
	 */
	public R visit(CompareExpression n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("int") || !type1.equals("int"))
		{
			System.out.println("Type error");
			System.out.println("9");
			System.exit(0);
		}
		_ret = (R)"boolean";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "!="
	 * f2 -> PrimaryExpression()
	 */
	public R visit(neqExpression n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!((type2.equals("int") && type1.equals("int")) || (type2.equals("boolean")) && type1.equals("boolean")))
		{
			System.out.println("Type error");
			System.out.println("10");
			System.exit(0);
		}
		_ret = (R)"boolean";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "+"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(PlusExpression n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("int") || !type1.equals("int"))
		{
			System.out.println("Type error");
			System.out.println("11");
			System.exit(0);
		}
		_ret = (R)"int";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "-"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(MinusExpression n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("int") || !type1.equals("int"))
		{
			System.out.println("Type error");
			System.out.println("12");
			System.exit(0);
		}
		_ret = (R)"int";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "*"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(TimesExpression n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("int") || !type1.equals("int"))
		{
			System.out.println("Type error");
			System.out.println("13");
			System.exit(0);
		}
		_ret = (R)"int";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "/"
	 * f2 -> PrimaryExpression()
	 */
	public R visit(DivExpression n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("int") || !type1.equals("int"))
		{
			System.out.println("Type error");
			System.out.println("14");
			System.exit(0);
		}
		_ret = (R)"int";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "["
	 * f2 -> PrimaryExpression()
	 * f3 -> "]"
	 */
	public R visit(ArrayLookup n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		type2 = findIdType(type2)==null?type2:findIdType(type2);
		if(!type2.equals("int") || !type1.equals("int[]"))
		{
			System.out.println("Type error");
			System.out.println("15");
			System.exit(0);
		}
		n.f3.accept(this);
		_ret = (R)"int";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "."
	 * f2 -> "length"
	 */
	public R visit(ArrayLength n) {
		R _ret=null;
		String type = n.f0.accept(this).toString();
		type = findIdType(type)==null?type:findIdType(type);
		if(!type.equals("int[]")){
			System.out.println("Type error");
			System.out.println("16");
			System.exit(0);
		}
		n.f1.accept(this);
		n.f2.accept(this);
		_ret = (R)"int";
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "."
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( ExpressionList() )?
	 * f5 -> ")"
	 */
	public R visit(MessageSend n) {
		R _ret=null;
		String type1 = n.f0.accept(this).toString();
		//type1 = symbolTableVar.containsKey(fullScope()+type1)?symbolTableVar.get(fullScope()+type1):type1;
		type1 = findIdType(type1)==null?type1:findIdType(type1);
		if(type1==null || type1.equals("int") || type1.equals("boolean") || type1.equals("int[]"))
		{
			System.out.println("Type error");
			System.out.println("17");
			System.exit(0);
		}
		
		n.f1.accept(this);
		String type2 = n.f2.accept(this).toString();
		
		LinkedList<String> params = findMethod(type1, type2);
		if(params == null)
		{
			System.out.println("Type error");
			System.out.println("18");
			System.exit(0);
		}
		n.f3.accept(this);
		tmpList = new LinkedList<String>();
		n.f4.accept(this);
		
		// type checking the arguments for function calls
		_ret = (R)params.peek();
		if((params.size()-1)!=tmpList.size())
		{
			System.out.println("Type error");
			System.out.println("19");
			System.exit(0);
		}
		int x=0;
		for(x=0;x<tmpList.size();x++){
			if(!(paramTypeCheck(params.get(x+1),(tmpList.get(x)))))
				break;
		}
		if(x!=tmpList.size())
		{
			System.out.println("Type error");
			System.out.println("20");
			//System.out.println(params.get(x+1)+" "+tmpList.get(x));
			System.exit(0);
		}	
		
		n.f5.accept(this);
		return _ret;
	}
	
	LinkedList<String> findMethod(String className, String methodName)
	{
		String parent = className;
		while(parent!=null && symbolTableMethod.get(parent+":"+methodName+":")==null){
			parent = parentTable.get(parent);
		}
		LinkedList<String> result = null;
		result = symbolTableMethod.get(parent+":"+methodName+":");
		//System.out.println(parent+":"+methodName+":");
		if(result==null){
			System.out.println("Type error");
			System.out.println("21");
			System.exit(0);
		}
		return result;
	}
	
	boolean paramTypeCheck(String type, String tmpType){
		while(!type.equals(tmpType) && tmpType!=null)
			tmpType = parentTable.get(tmpType);
		if(tmpType == null)
			return false;
		else
			return true;
	}
	/**
	 * f0 -> Expression()
	 * f1 -> ( ExpressionRest() )*
	 */
	public R visit(ExpressionList n) {
		R _ret=null;
		String type = n.f0.accept(this).toString();
		//type = symbolTableVar.containsKey(fullScope()+type)?symbolTableVar.get(fullScope()+type):type;
		//type = findIdType(type)==null?type:findIdType(type);
		tmpList.add(type);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> Expression()
	 */
	public R visit(ExpressionRest n) {
		R _ret=null;
		n.f0.accept(this);
		String type = n.f1.accept(this).toString();
		//type = symbolTableVar.containsKey(fullScope()+type)?symbolTableVar.get(fullScope()+type):type;
		//type = findIdType(type)==null?type:findIdType(type);
		tmpList.add(type);
		return _ret;
	}

	/**
	 * f0 -> IntegerLiteral()
	 *       | TrueLiteral()
	 *       | FalseLiteral()
	 *       | Identifier()
	 *       | ThisExpression()
	 *       | ArrayAllocationExpression()
	 *       | AllocationExpression()
	 *       | NotExpression()
	 *       | BracketExpression()
	 */
	public R visit(PrimaryExpression n) {
		R _ret=null;
		String a = (n.f0.accept(this).toString());
		_ret = (R)(findIdType(a));
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n) {
		R _ret=null;
		n.f0.accept(this);
		_ret = (R)("int");
		return _ret;
	}

	/**
	 * f0 -> "true"
	 */
	public R visit(TrueLiteral n) {
		R _ret=null;
		n.f0.accept(this);
		_ret = (R)("boolean");
		return _ret;
	}

	/**
	 * f0 -> "false"
	 */
	public R visit(FalseLiteral n) {
		R _ret=null;
		n.f0.accept(this);
		_ret = (R)("boolean");
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Identifier n) {
		R _ret=null;
		_ret = (R)(n.f0.toString());
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "this"
	 */
	public R visit(ThisExpression n) {
		R _ret=null;
		n.f0.accept(this);
		if(!symbolTableMethod.containsKey(fullScope()))
			_ret = (R)scope.peek();			
		else{
			String s = scope.pop();
			_ret = (R)scope.peek();
			scope.push(s);
		}
		return _ret;
	}

	/**
	 * f0 -> "new"
	 * f1 -> "int"
	 * f2 -> "["
	 * f3 -> Expression()
	 * f4 -> "]"
	 */
	public R visit(ArrayAllocationExpression n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		String type = n.f3.accept(this).toString();
		//type = findIdType(type)==null?type:findIdType(type);
		if(!(type.equals("int")))
		{
			System.out.println("Type error");
			System.out.println("17");
			System.exit(0);	
		}
		n.f4.accept(this);
		_ret = (R)("int[]");
		return _ret;
	}

	/**
	 * f0 -> "new"
	 * f1 -> Identifier()
	 * f2 -> "("
	 * f3 -> ")"
	 */
	public R visit(AllocationExpression n) {
		R _ret=null;
		n.f0.accept(this);
		_ret = (R)(n.f1.accept(this).toString());
		if(!parentTable.containsKey(_ret))
		{
			System.out.println("Type error");
			System.out.println("18");
			System.exit(0);
		}
		n.f2.accept(this);
		n.f3.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "!"
	 * f1 -> Expression()
	 */
	public R visit(NotExpression n) {
		R _ret=null;
		n.f0.accept(this);
		String type = n.f1.accept(this).toString();
		//type = findIdType(type)==null?type:findIdType(type);
		if(!(type.equals("boolean")))
		{
			System.out.println("Type error");
			System.out.println("19");
			System.exit(0);
		}
		_ret = (R)("boolean");
		return _ret;
	}

	/**
	 * f0 -> "("
	 * f1 -> Expression()
	 * f2 -> ")"
	 */
	public R visit(BracketExpression n) {
		R _ret=null;
		n.f0.accept(this);
		String type = n.f1.accept(this).toString();
		//type = findIdType(type)==null?type:findIdType(type);
		_ret = (R)(type);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> ( IdentifierRest() )*
	 */
	public R visit(IdentifierList n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> Identifier()
	 */
	public R visit(IdentifierRest n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

}
